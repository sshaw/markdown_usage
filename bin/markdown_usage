#!/usr/bin/env ruby
# coding: utf-8

require "stringio"
require "tempfile"
require "fileutils"

require "markdown_usage"

def script?(path)
  # Other langs that support DATA sections?
  %w[rb pl].include?(File.extname(path)) ||
    File.file?(path) && File.open(path) { |io| return io.gets =~ /\A#!.*\b(?:perl|ruby)/ }
end

def usage(status = 1)
  puts DATA.read
  exit status
end

options = { :exit => false }

while ARGV.any?
  case ARGV[0]
  when "-h", "--help"
    usage(0)
  when "-s"
    ARGV.shift
    usage unless ARGV[0]
    options[:sections] = ARGV.shift.split(",")
  when "-o"
    ARGV.shift
    usage unless ARGV[0]
    output = ARGV.shift
  else
    options[:source] = ARGV.shift
  end
end

usage unless options[:source]

unless output
  MarkdownUsage(options.merge(:output => $stdout))
  exit
end

unless script?(output)
  File.open(output, "w+") { |io| MarkdownUsage.print(options.merge(:output => io)) }
  exit
end

io = StringIO.new
MarkdownUsage(options.merge(:output => io))
io.rewind

data = File.read(output)
code = data.split(/^__END__$/, 2)
code[1] = io.string

out = Tempfile.new("MarkdownUsage")
out.puts code[0]
out.puts "__END__"
out << code[1]
out.close

# Will this reset permissions on Windows?
FileUtils.chmod(File.stat(output).mode, out.path)
FileUtils.mv(out.path, output)

out.unlink

__END__
  [36;1m[38;5;230mmarkdown_usage[39m Script[0m

  [33;1mmarkdown_usage[0m - embed or output a colorized version of your programs usage from a Markdown document

    [36;1mUsage[0m

    [38;5;230mmarkdown_usage [-h] [-s sections] [-o output] markdown_doc[39m

    [38;5;230mmarkdown_doc[39m is a file containing the Markdown to use.

    [33m●[0m [38;5;230m-h[39m show this help menu
    [33m●[0m [38;5;230m-o[39m [38;5;230moutput[39m   where to output the colorized usage, defaults to [38;5;230mstdout[39m
    [33m●[0m [38;5;230m-s[39m [38;5;230msections[39m sections to extract from [38;5;230mmarkdown_doc[39m

      [36;1m[38;5;230moutput[39m[0m

      This can be a file or a script. If its a script it will be added to the scripts data section.
Existing data section content will be overwritten.

      We assume [38;5;230moutput[39m is a script if one of the following are true:

      [33m●[0m It ends in [38;5;230m.rb[39m or [38;5;230m.pl[39m (these languages support data sections)
      [33m●[0m It contains  *nix shebang on the first line for [38;5;230mruby[39m or [38;5;153;01mperl[39;00m e.g., [38;5;67;04m#!/usr/bin/env ruby[39;00m

      [36;1m[38;5;230msections[39m[0m

      These must be the headings without leading or trailing heading format characters.
If the heading text has other formatting characters, they must be included (see [34;4m#examples[0m).

      Multiple sections can be separated by a comma.

    [36;1mExamples[0m

    Output the section [38;5;230mUsage[39m from [38;5;230mREADME.md[39m to [38;5;230mUSAGE[39m:

    [38;5;230mmarkdown_usage -s Usage README.md > USAGE[39m

    Output the sections [38;5;230mUsage[39m and [38;5;230mMore Info[39m from [38;5;230mREADME.md[39m to [38;5;230mUSAGE[39m:

    [38;5;230mmarkdown_usage -s 'Usage,More Info' README.md > USAGE[39m

    Add the following formatted section to the data section of [38;5;230mscript.rb[39m:

    [38;5;230mmarkdown_usage -s '`markdown_usage` Script' -o script.rb README.markdown[39m

